{
	"info": {
		"_postman_id": "12345678-1234-1234-1234-123456789012",
		"name": "Row Level Security API",
		"description": "API testing untuk backend dengan Row Level Security menggunakan Go dan PostgreSQL",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Register User 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('auth_token_user1', response.token);",
									"    pm.environment.set('user_id_user1', response.user.id);",
									"    pm.test('Registration successful', function () {",
									"        pm.expect(response.token).to.not.be.empty;",
									"        pm.expect(response.user.tenant_id).to.be.null;",
									"    });",
									"} else {",
									"    pm.test('Registration failed', function () {",
									"        pm.expect(pm.response.code).to.equal(201);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"user1@example.com\",\n    \"password\": \"password123\",\n    \"name\": \"User One\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register User 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('auth_token_user2', response.token);",
									"    pm.environment.set('user_id_user2', response.user.id);",
									"    pm.test('Registration successful', function () {",
									"        pm.expect(response.token).to.not.be.empty;",
									"        pm.expect(response.user.tenant_id).to.be.null;",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"user2@example.com\",\n    \"password\": \"password123\",\n    \"name\": \"User Two\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login User 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('auth_token_user1', response.token);",
									"    pm.test('Login successful', function () {",
									"        pm.expect(response.token).to.not.be.empty;",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"user1@example.com\",\n    \"password\": \"password123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login User 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('auth_token_user2', response.token);",
									"    pm.test('Login successful', function () {",
									"        pm.expect(response.token).to.not.be.empty;",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"user2@example.com\",\n    \"password\": \"password123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Tenant Management",
			"item": [
				{
					"name": "Create Tenant 1 (User 1)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('tenant_id_1', response.tenant.id);",
									"    pm.test('Tenant created successfully', function () {",
									"        pm.expect(response.tenant.name).to.equal('Company A');",
									"        pm.expect(response.tenant.domain).to.equal('company-a.com');",
									"        pm.expect(response.message).to.include('Tenant created');",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token_user1}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Company A\",\n    \"domain\": \"company-a.com\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/tenants",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"tenants"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Tenant 2 (User 2)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('tenant_id_2', response.tenant.id);",
									"    pm.test('Tenant created successfully', function () {",
									"        pm.expect(response.tenant.name).to.equal('Company B');",
									"        pm.expect(response.tenant.domain).to.equal('company-b.com');",
									"        pm.expect(response.message).to.include('Tenant created');",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token_user2}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Company B\",\n    \"domain\": \"company-b.com\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/tenants",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"tenants"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Posts - Tenant 1",
			"item": [
				{
					"name": "Create Public Post - Tenant 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('post_id_tenant1_public', response.id);",
									"    pm.test('Post created successfully', function () {",
									"        pm.expect(response.title).to.equal('Public Post from Tenant 1');",
									"        pm.expect(response.is_public).to.be.true;",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token_user1}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Public Post from Tenant 1\",\n    \"content\": \"This is a public post that should be visible to other users in the same tenant\",\n    \"is_public\": true\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/posts",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"posts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Private Post - Tenant 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('post_id_tenant1_private', response.id);",
									"    pm.test('Private post created successfully', function () {",
									"        pm.expect(response.title).to.equal('Private Post from Tenant 1');",
									"        pm.expect(response.is_public).to.be.false;",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token_user1}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Private Post from Tenant 1\",\n    \"content\": \"This is a private post that should only be visible to the author\",\n    \"is_public\": false\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/posts",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"posts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Posts - Tenant 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.test('Posts retrieved successfully', function () {",
									"        pm.expect(response).to.be.an('array');",
									"        // Should only see posts from same tenant",
									"        response.forEach(post => {",
									"            pm.expect(post.tenant_id).to.equal(pm.environment.get('tenant_id_1'));",
									"        });",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token_user1}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/posts",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"posts"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Posts - Tenant 2",
			"item": [
				{
					"name": "Create Public Post - Tenant 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('post_id_tenant2_public', response.id);",
									"    pm.test('Post created successfully', function () {",
									"        pm.expect(response.title).to.equal('Public Post from Tenant 2');",
									"        pm.expect(response.is_public).to.be.true;",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token_user2}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Public Post from Tenant 2\",\n    \"content\": \"This is a public post from tenant 2\",\n    \"is_public\": true\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/posts",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"posts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Posts - Tenant 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.test('Posts retrieved successfully', function () {",
									"        pm.expect(response).to.be.an('array');",
									"        // Should only see posts from same tenant",
									"        response.forEach(post => {",
									"            pm.expect(post.tenant_id).to.equal(pm.environment.get('tenant_id_2'));",
									"        });",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token_user2}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/posts",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"posts"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "RLS Testing",
			"item": [
				{
					"name": "Try to Access Tenant 2 Posts with Tenant 1 Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.test('RLS working - should not see other tenant posts', function () {",
									"        pm.expect(response).to.be.an('array');",
									"        // Should not contain any posts from tenant 2",
									"        response.forEach(post => {",
									"            pm.expect(post.tenant_id).to.not.equal(pm.environment.get('tenant_id_2'));",
									"        });",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token_user1}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/posts",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"posts"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}